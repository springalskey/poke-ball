#!/usr/bin/env node

var program = require('commander');
var child_process = require('child_process');
var colors = require('colors');

var version = require('../package.json').version;
var FileTools = require('../tools/file.js').FileTools;
var DirTools = require('../tools/file.js').DirTools;

program.parse(process.argv);

var args = program.args;
var moduleName = args[0];

console.log('kk-module args:', args);

// 判断当前目录是否有效，有没有‘src’目录
var dirList = DirTools.readDir(process.cwd());
var isProjectPath = false;
dirList.forEach(function(el) {
  if (el == 'src')
    isProjectPath = true;
})
if (!isProjectPath) {
  console.log('this is not a valid path'.red);
  return;
}

//判断需要创建的模块是否存在
if (DirTools.isExist(`${process.cwd()}/src/views/${moduleName}`)) {
  console.log('该模块已存在'.red);
  return;
}

// 创建module Dir
DirTools.mkDir(`${process.cwd()}/src/views/${moduleName}`);
console.log(`create module directory ${moduleName} success`.green);

// 创建module文件
var content = FileTools.readFile(`${__dirname}/../template/module/index.js`).toString();
content = content.replace(/{moduleName}/g, moduleName);
FileTools.createFile(`${process.cwd()}/src/views/${moduleName}/index.js`, content);
console.log(`create module file : index.js success`.green);

// 创建 vuex action
var content = FileTools.readFile(`${__dirname}/../template/action.js`).toString();
content = content.replace(/{moduleName}/g, moduleName);
content = content.replace(/{MODULENAME}/g, moduleName.toUpperCase());
FileTools.createFile(`${process.cwd()}/src/vuex/actions/${moduleName}Action.js`, content);
console.log(`create vuex action file:${moduleName}Action.js success`.green);

// 创建 vuex modules
var content = FileTools.readFile(`${__dirname}/../template/module.js`).toString();
content = content.replace(/{MODULENAME}/g, moduleName.toUpperCase());
FileTools.createFile(`${process.cwd()}/src/vuex/modules/${moduleName}Mutation.js`, content);
console.log(`create vuex modules file:${moduleName}Mutation.js success`.green);

console.log(`create  module: ${moduleName} success`.green);
